AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-video-sync-test

  Sample SAM Template for sam-video-sync-test

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 500
    MemorySize: 1024

Resources:
  VideoProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/video_processor.asl.json
      DefinitionSubstitutions:
        DownloadVideoFunctionArn: !GetAtt DownloadVideo.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /state/start
            Method: get

  DownloadVideo:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: vidsync-compiler
      Architectures:
        - x86_64
    Metadata:
      DockerTag: nodejs18.x-v2
      DockerContext: ./functions/download
      Dockerfile: Dockerfile

  ConcatenateVideo:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: vidsync-compiler
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /video/concatenate
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v2
      DockerContext: ./functions/concatenate
      Dockerfile: Dockerfile

  PreProcess:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: vidsync-compiler
      Architectures:
        - x86_64
    Metadata:
      DockerTag: nodejs18.x-v2
      DockerContext: ./functions/preProcess
      Dockerfile: Dockerfile
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
# Outputs:
# # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
# # Find out more about other implicit resources you can reference within SAM
# # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
# HelloWorldApi:
#   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
# HelloWorldFunction:
#   Description: "Hello World Lambda Function ARN"
#   Value: !GetAtt HelloWorldFunction.Arn
# HelloWorldFunctionIamRole:
#   Description: "Implicit IAM Role created for Hello World function"
#   Value: !GetAtt HelloWorldFunctionRole.Arn
