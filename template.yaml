AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-video-sync-test

  Sample SAM Template for sam-video-sync-test

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 500
    MemorySize: 3008

Resources:
  VideoProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/video_processor.asl.json
      DefinitionSubstitutions:
        DownloadVideoFunctionArn: !GetAtt DownloadVideo.Arn
        ConcatenateVideoFunctionArn: !GetAtt ConcatenateVideo.Arn
        PreProcessFunctionArn: !GetAtt PreProcess.Arn
        CurateFunctionArn: !GetAtt Curate.Arn
        UploadYoutubeFunctionArn: !GetAtt UploadYoutube.Arn
        GenerateMetadataFunctionArn: !GetAtt GenerateMetadata.Arn
      Role: !GetAtt VideoProcessingStateMachineRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /state/start
            Method: get

  UploadYoutube:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 2048
      Environment:
        Variables:
          YOUTUBE_CLIENT_ID: "{{resolve:ssm:/vidsync/youtube/id:1}}"
          YOUTUBE_CLIENT_SECRET: "{{resolve:ssm:/vidsync/youtube/token:1}}"
    Metadata:
      DockerContext: ./functions/uploadYoutube
      Dockerfile: Dockerfile

  GenerateMetadata:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
    Metadata:
      DockerContext: ./functions/generateMetadata
      Dockerfile: Dockerfile

  Curate:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TWITCH_CLIENT_ID: "{{resolve:ssm:/vidsync/twitch/id:1}}"
          TWITCH_ACCESS_TOKEN: "{{resolve:ssm:/vidsync/twitch/token:1}}"
    Metadata:
      DockerContext: ./functions/curate
      Dockerfile: Dockerfile

  DownloadVideo:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: vidsync-compiler
      Architectures:
        - x86_64
    Metadata:
      DockerContext: ./functions/download
      Dockerfile: Dockerfile

  ConcatenateVideo:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      EphemeralStorage:
        Size: 2048
      Policies:
        - S3CrudPolicy:
            BucketName: vidsync-compiler
      Architectures:
        - x86_64
    Metadata:
      DockerContext: ./functions/concatenate
      Dockerfile: Dockerfile

  PreProcess:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: vidsync-compiler
      Architectures:
        - x86_64
    Metadata:
      DockerContext: ./functions/preProcess
      Dockerfile: Dockerfile

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  VideoProcessingStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt DownloadVideo.Arn
                  - !GetAtt ConcatenateVideo.Arn
                  - !GetAtt PreProcess.Arn
                  - !GetAtt Curate.Arn
                  - !GetAtt GenerateMetadata.Arn
                  - !GetAtt UploadYoutube.Arn
